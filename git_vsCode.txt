Existe a opção de usar o Git pelo prompt de comandos, seja o prompt do Windows ou 
o integrado no Visual Studio Code, mas como mencionamos antes, existe uma integração do 
próprio VS Code que facilita esse processo, de uma forma visual, com ícones. 
Portanto, vamos aprender a usar esse recurso.

Estou com o meu Visual Studio Code aberto e vou fechar essa janela do terminal 
clicando no ícone "X" no canto superior direito do terminal. Depois, na barra de menu, 
na lateral esquerda da janela, temos o ícone do Explorador, que é o primeiro,
 seguido do de Busca, que é o segundo.

O terceiro ícone, que tem forma de um Y com círculos nas extremidades, é, 
justamente, o ícone da integração do Git dentro do VS Code,
 chamada "Source Control" (Controle de Origem). Clicando nessa opção, 
 abrimos uma aba onde mostra, de maneira visual, todas as alterações no código, 
 e nós podemos fazer o commit, o pull, o push, tudo diretamente pela interface.
 
 faça as alterações no projeto

Agora, no ícone do Git que fica na barra lateral esquerda da janela, n
otamos que ele está com o número 2 dentro de um círculo azul.
 Isso indica que há alterações no projeto.

Esse número que aparece mostra que há mudanças e a quantidade delas.

Ao clicarmos, a aba que abre à direita da barra mostra uma lista 
suspensa chamada "Changes" (Mudanças), que podemos minimizar ou expandir. 
Dentro dessa lista estão todos os arquivos que foram alterados.

Para fazermos um commit, ele até destaca na parte superior dessa aba uma caixa de texto, 
para digitarmos a mensagem, e um botão azul abaixo dela, escrito "Commit", 
para realizarmos o commit. Lembrando que, antes de fazermos o commit, 
temos que adicionar os arquivos.

Ao passarmos o mouse sobre cada um dos arquivos, 
ele mostra três ícones no lado direito do nome, sendo eles, da esquerda para direita:

Open file (Abrir arquivo): clicando nele, abrimos o arquivo alterado.
  Esse ícone tem o formato de uma folha de papel com o canto superior direito dobrado
  e uma seta de retorno no canto superior esquerdo da folha;

Discard Changes (Descartar mudanças): ao ser clicado, esse botão desfaz as mudanças no arquivo.
 Podemos clicar nele quando alteramos arquivos por engano. Ele tem o formato de uma seta 
 curva que aponta para esquerda;

Stage Changes (Preparar mudanças): clicando nele, adicionamos o arquivo ao próximo commit.
 O ícone é um sinal de mais.
Clicaremos no botão "Stage Changes" nos dois arquivos. 
Agora a lista "Changes" está vazia e os dois arquivos passaram para 
uma nova lista suspensa na parte superior chamada "Staged Changes" 
(Mudanças preparadas). São as alterações que já foram adicionadas e
 já podemos realizar o commit. 

precisamos informar uma mensagem novamente. 
Temos esse campo na parte superior da aba onde podemos escrever a mensagem do commit.

mas agora de uma maneira mais simples. Então, digitaremos a mensagem
 "Deixando o jogo mais fácil". Depois de escrever, 
 clicamos no botão azul chamado commit.

A princípio, ele realizou o commit e o botão azul mudou o texto para 
"Sync Changes 1" (Sincronizar Mudanças 1), ou seja, se tornou um botão de sincronização. 
Ele detectou que há um commit no meu repositório local, 
mas que ele ainda não foi enviado para o GitHub.

Então, é exibido esse botão para sincronizar as mudanças com o repositório remoto.
 Ao clicarmos no botão "Sync Changes 1", os dados devem ser enviados para o GitHub. 
 Para isso, apareceu um alerta no centro da tela com uma mensagem informando que ess
 a ação sincroniza com o "origin/main".

Isso significa que ele enviará para o seu repositório remoto o que está na branch main.
 
 Após clicarmos, ele irá sincronizar as mudanças, 
 o que pode demorar um pouco. Após concluir, o botão da aba do Git fica desativado
  e volta ao texto "Commit".


A ideia é que nós sempre utilizemos o Git no VS Code por essa opção, 
pois simplifica o processo de sincronização das mudanças